daml 1.2
module Manifests where

import qualified DA.Text as Text

-- For want of a better alternative
data Blob = Blob Text deriving (Eq,Show)

-- Create a 'SHA256' type
data SHA256 = SHA256 Text deriving (Eq,Show)

-- With 2 methods:
-- computeSHA256 takes a blob and always returns a SHA256 of "123456789ABCDEF..."
computeSHA256: Blob -> SHA256
computeSHA256 b = SHA256 "0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF"
-- computeSize takes a blob and always returns its size as 65536
computeSize: Blob -> Int
computeSize (Blob b) = Text.length b

-- Better using 'map' (Thanks Neil)
computeLayer: Blob -> Layer
computeLayer b = Layer with
    mediaType = ""
    size = computeSize b
    digest = computeSHA256 b

computeLayers: [Blob] -> [Layer]
computeLayers = map computeLayer

btol: Blob -> Layer
btol b = Layer with
    mediaType = ""
    size = computeSize b
    digest = computeSHA256 b
btolf = map btol


-- Definition of a Manifest
-- Unclear whether Config==Layer
data Manifest = Manifest
  with
    schemaVersion: Int
    mediaType: Text
    config: Config
    layers: [Layer]
  deriving (Eq,Show)
data Config = Config
  with
    mediaType: Text
    size: Int
    digest: SHA256
  deriving (Eq,Show)
data Layer = Layer
  with
    mediaType: Text
    size: Int
    digest: SHA256
  deriving (Eq,Show)

-- e.g. gcr.io or hub.docker.com
template Registry
  with
    owner: Party
    root: Text
  where
    signatory owner

-- Folks must make AccountRequest(s) against a Registry
-- The Registry owner can Accept|Reject these requests
template AccountRequest
  with
    owner: Party
    registry: Registry
  where
    signatory owner
    controller registry.owner can
      Accept: ContractId Account
        with
          name: Text
        do
        create Account with
          owner = owner
          registry = registry
          name = registry.root <> "/" <> name
      -- TODO(dazwilkin) -- How to do a Reject using the new syntax?
      Reject: ()
        do
          return ()

-- Account owners can create arbitrary numbers of repositories
-- Repositories have a path, e.g. "busybox"
-- No check is made on name uniqueness
template Account
  with
    owner: Party
    registry: Registry
    name: Text
  where
    signatory owner
    observer registry.owner
    controller owner can
      CreateRepository: ContractId Repository
        with
          image: Text
        do
        create Repository with
          owner = owner
          account = this
          image = image

-- For simplicity, once owners have an Account
-- They can create Repositories arbitrarily within it
-- Repository owners can create ImageRequests
-- A list of Blobs is required
template Repository
  with
    owner: Party
    account: Account
    image: Text
  where
    signatory owner
    observer account.registry.owner
    controller owner can
      -- Aka "Push"
      CreateImageRequest: ContractId ImageRequest
        with
          blobs: [Blob]
        do
        create ImageRequest with
          owner = owner
          repository = this
          blobs = blobs

-- Registry owners can CreateManifests from ImageRequests
template ImageRequest
  with
    owner: Party
    repository: Repository
    blobs: [Blob]
  where
    signatory owner
    controller repository.account.registry.owner can
      CreateManifest: ContractId Image
        do
        let
          layers = computeLayers blobs
          config = Config with
            mediaType=""
            size=0
            digest=SHA256 ""
          manifest = Manifest with
            schemaVersion=2
            mediaType=""
            config=config 
            layers=layers
        create Image with
          owner = owner
          repository = this.repository
          manifest = manifest

-- Images belong to Repositories and are represented by a Manifest
-- Conceptually the Blobs (and other Image) sundry should be here too
template Image
  with
    owner: Party
    repository: Repository
    manifest: Manifest
  where
    signatory repository.account.registry.owner
    -- TODO(dazwilkin) How to add anyone in the Registry as an observer?
    observer owner

setup = scenario do
  alice <- getParty "Alice"
  docker <- getParty "Docker"
  google <- getParty "Google"

  let
    blob = Blob ""
    image = "busybox"

  registryDocker <-
    submit docker do
      -- create returns a RegistryID
      registryDockerId <- create Registry with
        owner = docker
        root = "https://hub.docker.com/v2"
      -- want to return the Registry contract
      fetch registryDockerId

  registryGoogle <- 
    submit google do
      -- create returns a RegistryID
      registryGoogleId <- create Registry with
        owner = google
        root = "https://gcr.io/v2"
      -- want to return the Registry contract
      fetch registryGoogleId

  -- Alice creates an AccountRequest
  aliceGoogleAccountRequestId <-
    submit alice do
      create AccountRequest with
        owner = alice
        registry = registryGoogle

  -- Google Accept(s) it
  aliceAccountId <- submit google do
    exercise aliceGoogleAccountRequestId Accept with
      name = "project-id"

  -- Alice creates an ImageRequest
  aliceGoogleImageRequestId <- submit alice do
    aliceRepositoryId <- exercise aliceAccountId CreateRepository with
      image = image
    aliceRepository <- fetch aliceRepositoryId
    create ImageRequest with
      owner = alice
      repository = aliceRepository
      blobs = [blob,blob,blob]
    
  -- Google CreateManifest from it
  submit google do
    exercise aliceGoogleImageRequestId CreateManifest

  
  aliceDockerAccountRequestId <-
    submit alice do
      create AccountRequest with
        owner = alice
        registry = registryDocker

  aliceAccountId <- submit docker do
    exercise aliceDockerAccountRequestId Accept with
      name = "alice"

  aliceDockerImageRequestId <- submit alice do
    aliceRepositoryId <- exercise aliceAccountId CreateRepository with
      image = image
    aliceRepository <- fetch aliceRepositoryId
    create ImageRequest with
      owner = alice
      repository = aliceRepository
      blobs = [blob,blob,blob,blob,blob]

  submit docker do
    exercise aliceDockerImageRequestId CreateManifest
